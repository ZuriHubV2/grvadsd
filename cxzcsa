-- üçì Client-Sided Straight-Line Strawberry Elephant
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local brainrotName = "Strawberry Elephant"

--// Get model
local model = ReplicatedStorage:WaitForChild("Models"):WaitForChild("Animals"):FindFirstChild(brainrotName)
if not model then
    warn("Could not find model: " .. brainrotName)
    return
end

--// Get animations
local animFolder = ReplicatedStorage:WaitForChild("Animations"):WaitForChild("Animals"):FindFirstChild(brainrotName)
if not animFolder then
    warn("No animation folder for " .. brainrotName)
    return
end
local idleAnim = animFolder:FindFirstChild("Idle")
local walkAnim = animFolder:FindFirstChild("Walk")

--// Get RenderedMovingAnimals folder and reference parts
local renderedFolder = Workspace:FindFirstChild("RenderedMovingAnimals") or Instance.new("Folder", Workspace)
renderedFolder.Name = "RenderedMovingAnimals"

local startPart = renderedFolder:FindFirstChild("Start")
local endPart = renderedFolder:FindFirstChild("End")
local groundPart = renderedFolder:FindFirstChild("StartGround")

if not (startPart and endPart) then
    warn("Start or End part missing under RenderedMovingAnimals.")
    return
end

--// Clone and setup model
local clone = model:Clone()
clone.Name = brainrotName .. "_ClientClone"
clone.Parent = renderedFolder

-- Adjust spawn height if needed
local yOffset = 2
if groundPart then
    yOffset = (groundPart.Position.Y - startPart.Position.Y) + 2
end

clone:PivotTo(startPart.CFrame + Vector3.new(0, yOffset, 0))

-- Ensure PrimaryPart
if not clone.PrimaryPart then
    clone.PrimaryPart = clone:FindFirstChild("HumanoidRootPart") or clone:FindFirstChildWhichIsA("BasePart")
end

-- Add Humanoid + Animator for animations
local humanoid = clone:FindFirstChildOfClass("Humanoid") or Instance.new("Humanoid", clone)
local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)

-- Load animations
local idleTrack = idleAnim and animator:LoadAnimation(idleAnim)
local walkTrack = walkAnim and animator:LoadAnimation(walkAnim)

if idleTrack then idleTrack:Play() end

--// Movement loop (walks from Start ‚Üí End ‚Üí Start repeatedly)
task.spawn(function()
    while clone and clone.Parent == renderedFolder do
        if not (clone.PrimaryPart and startPart and endPart) then break end

        -- Play walk animation
        if walkTrack then
            if idleTrack and idleTrack.IsPlaying then idleTrack:Stop() end
            walkTrack:Play()
        end

        -- Tween from Start ‚Üí End
        local duration = (startPart.Position - endPart.Position).Magnitude / 10 -- speed factor
        local tweenToEnd = TweenService:Create(clone.PrimaryPart, TweenInfo.new(duration, Enum.EasingStyle.Linear), { CFrame = endPart.CFrame + Vector3.new(0, yOffset, 0) })
        tweenToEnd:Play()
        tweenToEnd.Completed:Wait()

        -- Play idle
        if walkTrack and walkTrack.IsPlaying then walkTrack:Stop() end
        if idleTrack then idleTrack:Play() end
        task.wait(2)

        -- Walk back End ‚Üí Start
        if walkTrack then
            if idleTrack and idleTrack.IsPlaying then idleTrack:Stop() end
            walkTrack:Play()
        end

        local tweenToStart = TweenService:Create(clone.PrimaryPart, TweenInfo.new(duration, Enum.EasingStyle.Linear), { CFrame = startPart.CFrame + Vector3.new(0, yOffset, 0) })
        tweenToStart:Play()
        tweenToStart.Completed:Wait()

        if walkTrack and walkTrack.IsPlaying then walkTrack:Stop() end
        if idleTrack then idleTrack:Play() end
        task.wait(2)
    end
end)

print("[Client] ‚úÖ Spawned straight-line walking Strawberry Elephant (local only)")
